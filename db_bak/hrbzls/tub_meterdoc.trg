CREATE OR REPLACE TRIGGER HRBZLS."TUB_METERDOC" BEFORE UPDATE
OF MDMID,
   MDID,
   MDCALIBER,
   MDBRAND,
   MDMODEL
ON METERDOC FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
    SEQ NUMBER;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "METERCALIBER"
    CURSOR CPK1_METERDOC(VAR_MDCALIBER NUMBER) IS
       SELECT 1
       FROM   METERCALIBER
       WHERE  MCID = VAR_MDCALIBER
        AND   VAR_MDCALIBER IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "METERBRAND"
    CURSOR CPK2_METERDOC(VAR_MDBRAND VARCHAR) IS
       SELECT 1
       FROM   METERBRAND
       WHERE  MBID = VAR_MDBRAND
        AND   VAR_MDBRAND IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "METERMODEL"
    /*CURSOR CPK3_METERDOC(VAR_MDMODEL VARCHAR) IS
       SELECT 1
       FROM   METERMODEL
       WHERE  MMID = VAR_MDMODEL
        AND   VAR_MDMODEL IS NOT NULL;*/
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "METERINFO"
    CURSOR CPK4_METERDOC(VAR_MDMID VARCHAR) IS
       SELECT 1
       FROM   METERINFO
       WHERE  MIID = VAR_MDMID
        AND   VAR_MDMID IS NOT NULL;

BEGIN
  if nvl(fsyspara('data'),'N')='Y' then
     return;
  end if;
    SEQ := INTEGRITYPACKAGE.GETNESTLEVEL;
    --  PARENT "METERCALIBER" MUST EXIST WHEN UPDATING A CHILD IN "METERDOC"
    IF (:NEW.MDCALIBER IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK1_METERDOC(:NEW.MDCALIBER);
       FETCH CPK1_METERDOC INTO DUMMY;
       FOUND := CPK1_METERDOC%FOUND;
       close CPK1_METERDOC;
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN "METERCALIBER". CANNOT UPDATE CHILD IN "METERDOC".';
          raise integrity_error;
       end if;
    end if;

    --  Parent "METERBRAND" must exist when updating a child in "METERDOC"
    if (:new.MDBRAND is not null) and (seq = 0) then
       open  CPK2_METERDOC(:new.MDBRAND);
       fetch CPK2_METERDOC into dummy;
       found := CPK2_METERDOC%FOUND;
       CLOSE CPK2_METERDOC;
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN "METERBRAND". CANNOT UPDATE CHILD IN "METERDOC".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  PARENT "METERMODEL" MUST EXIST WHEN UPDATING A CHILD IN "METERDOC"
    /*IF (:NEW.MDMODEL IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK3_METERDOC(:NEW.MDMODEL);
       FETCH CPK3_METERDOC INTO DUMMY;
       FOUND := CPK3_METERDOC%FOUND;
       close CPK3_METERDOC;
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN "METERMODEL". CANNOT UPDATE CHILD IN "METERDOC".';
          raise integrity_error;
       end if;
    end if;*/

    --  Parent "METERINFO" must exist when updating a child in "METERDOC"
    if (:new.MDMID is not null) and (seq = 0) then
       open  CPK4_METERDOC(:new.MDMID);
       fetch CPK4_METERDOC into dummy;
       found := CPK4_METERDOC%FOUND;
       CLOSE CPK4_METERDOC;
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN "METERINFO". CANNOT UPDATE CHILD IN "METERDOC".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;


--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
/

