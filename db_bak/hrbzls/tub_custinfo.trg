CREATE OR REPLACE TRIGGER HRBZLS."TUB_CUSTINFO" BEFORE UPDATE
OF CIID,
   CISMFID,
   CISTATUS
ON CUSTINFO FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
    SEQ NUMBER;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "SYSCUSTSTATUS"
    CURSOR CPK1_CUSTINFO(VAR_CISTATUS VARCHAR) IS
       SELECT 1
       FROM   SYSCUSTSTATUS
       WHERE  SCSID = VAR_CISTATUS
        AND   VAR_CISTATUS IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "SYSMANAFRAME"
    CURSOR CPK2_CUSTINFO(VAR_CISMFID VARCHAR) IS
       SELECT 1
       FROM   SYSMANAFRAME
       WHERE  SMFID = VAR_CISMFID
        AND   VAR_CISMFID IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "SYSMANAFRAME"
    CURSOR CPK3_CUSTINFO(VAR_CISMFID VARCHAR) IS
       SELECT 1
       FROM   SYSMANAFRAME
       WHERE  SMFID = VAR_CISMFID
        AND   VAR_CISMFID IS NOT NULL;
    --  DECLARATION OF UPDATEPARENTRESTRICT CONSTRAINT FOR "METERINFO"
    CURSOR CFK1_METERINFO(VAR_CIID VARCHAR) IS
       SELECT 1
       FROM   METERINFO
       WHERE  MICID = VAR_CIID
        AND   VAR_CIID IS NOT NULL;
    --  DECLARATION OF UPDATEPARENTRESTRICT CONSTRAINT FOR "RECLIST"
    CURSOR CFK2_RECLIST(VAR_CIID VARCHAR) IS
       SELECT 1
       FROM   RECLIST
       WHERE  RLCID = VAR_CIID
        AND   VAR_CIID IS NOT NULL;

BEGIN
  if nvl(fsyspara('data'),'N')='Y' then
     return;
  end if;
    SEQ := INTEGRITYPACKAGE.GETNESTLEVEL;
    --  PARENT "SYSCUSTSTATUS" MUST EXIST WHEN UPDATING A CHILD IN "CUSTINFO"
    IF (:NEW.CISTATUS IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK1_CUSTINFO(:NEW.CISTATUS);
       FETCH CPK1_CUSTINFO INTO DUMMY;
       FOUND := CPK1_CUSTINFO%FOUND;
       close CPK1_CUSTINFO;
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN "SYSCUSTSTATUS". CANNOT UPDATE CHILD IN "CUSTINFO".';
          raise integrity_error;
       end if;
    end if;

    --  Parent "SYSMANAFRAME" must exist when updating a child in "CUSTINFO"
    if (:new.CISMFID is not null) and (seq = 0) then
       open  CPK2_CUSTINFO(:new.CISMFID);
       fetch CPK2_CUSTINFO into dummy;
       found := CPK2_CUSTINFO%FOUND;
       CLOSE CPK2_CUSTINFO;
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN "SYSMANAFRAME". CANNOT UPDATE CHILD IN "CUSTINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  PARENT "SYSMANAFRAME" MUST EXIST WHEN UPDATING A CHILD IN "CUSTINFO"
    IF (:NEW.CISMFID IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK3_CUSTINFO(:NEW.CISMFID);
       FETCH CPK3_CUSTINFO INTO DUMMY;
       FOUND := CPK3_CUSTINFO%FOUND;
       close CPK3_CUSTINFO;
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN "SYSMANAFRAME". CANNOT UPDATE CHILD IN "CUSTINFO".';
          raise integrity_error;
       end if;
    end if;

    --  Cannot modify parent code in "CUSTINFO" if children still exist in "METERINFO"
    if (updating('CIID') and :old.CIID != :new.CIID) then
       open  CFK1_METERINFO(:old.CIID);
       fetch CFK1_METERINFO into dummy;
       found := CFK1_METERINFO%FOUND;
       CLOSE CFK1_METERINFO;
       IF FOUND THEN
          ERRNO  := -20005;
          ERRMSG := 'CHILDREN STILL EXIST IN "METERINFO". CANNOT MODIFY PARENT CODE IN "CUSTINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  CANNOT MODIFY PARENT CODE IN "CUSTINFO" IF CHILDREN STILL EXIST IN "RECLIST"
    IF (UPDATING('CIID') AND :OLD.CIID != :NEW.CIID) THEN
       OPEN  CFK2_RECLIST(:OLD.CIID);
       FETCH CFK2_RECLIST INTO DUMMY;
       FOUND := CFK2_RECLIST%FOUND;
       CLOSE CFK2_RECLIST;
       IF FOUND THEN
          ERRNO  := -20005;
          ERRMSG := 'CHILDREN STILL EXIST IN "RECLIST". CANNOT MODIFY PARENT CODE IN "CUSTINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;


--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
/

