CREATE OR REPLACE TRIGGER HRBZLS."TIB_OPERROLEFUNC" BEFORE INSERT
ON OPERROLEFUNC FOR EACH ROW
DECLARE
 INTEGRITY_ERROR EXCEPTION;
 ERRNO INTEGER;
 ERRMSG CHAR(200);
 DUMMY INTEGER;
 FOUND BOOLEAN;
 -- DECLARATION OF INSERTCHILDPARENTEXIST CONSTRAINT FOR THE PARENT "OPERROLE"
 CURSOR CPK1_OPERROLEFUNC(VAR_ORFRID VARCHAR) IS
 SELECT 1
 FROM OPERROLE
 WHERE ORID = VAR_ORFRID
 AND VAR_ORFRID IS NOT NULL;
 -- DECLARATION OF INSERTCHILDPARENTEXIST CONSTRAINT FOR THE PARENT "ERPFUNCTION"
 CURSOR CPK2_OPERROLEFUNC(VAR_ORFFID VARCHAR) IS
 SELECT 1
 FROM ERPFUNCTION
 WHERE EFID = VAR_ORFFID
 AND VAR_ORFFID IS NOT NULL;

BEGIN
  if nvl(fsyspara('data'),'N')='Y' then
     return;
  end if;
 -- PARENT "OPERROLE" MUST EXIST WHEN INSERTING A CHILD IN "OPERROLEFUNC"
 IF :NEW.ORFRID IS NOT NULL THEN
 OPEN CPK1_OPERROLEFUNC(:NEW.ORFRID);
 FETCH CPK1_OPERROLEFUNC INTO DUMMY;
 FOUND := CPK1_OPERROLEFUNC%FOUND;
 close CPK1_OPERROLEFUNC;
 if not found then
 errno := -20002;
 errmsg := 'PARENT DOES NOT EXIST IN "OPERROLE". CANNOT CREATE CHILD IN "OPERROLEFUNC".';
 raise integrity_error;
 end if;
 end if;

 -- Parent "ERPFUNCTION" must exist when inserting a child in "OPERROLEFUNC"
 if :new.ORFFID is not null then
 open CPK2_OPERROLEFUNC(:new.ORFFID);
 fetch CPK2_OPERROLEFUNC into dummy;
 found := CPK2_OPERROLEFUNC%FOUND;
 CLOSE CPK2_OPERROLEFUNC;
 IF NOT FOUND THEN
 ERRNO := -20002;
 ERRMSG := 'PARENT DOES NOT EXIST IN "ERPFUNCTION". CANNOT CREATE CHILD IN "OPERROLEFUNC".';
 RAISE INTEGRITY_ERROR;
 END IF;
 END IF;


-- ERRORS HANDLING
EXCEPTION
 WHEN INTEGRITY_ERROR THEN
 RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
/

