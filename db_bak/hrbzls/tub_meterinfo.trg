CREATE OR REPLACE TRIGGER HRBZLS."TUB_METERINFO" BEFORE UPDATE
OF MICID,
   MIID,
   MISAFID,
   MISMFID,
   MIBFID,
   MIRTID,
   MISTID,
   MIPFID,
   MISTATUS,
   MIFACE,
   MIRPID,
   MITYPE,
   MICHARGETYPE
ON METERINFO FOR EACH ROW
DECLARE
    INTEGRITY_ERROR  EXCEPTION;
    ERRNO            INTEGER;
    ERRMSG           CHAR(200);
    DUMMY            INTEGER;
    FOUND            BOOLEAN;
    SEQ NUMBER;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "CUSTINFO"
    CURSOR CPK1_METERINFO(VAR_MICID VARCHAR) IS
       SELECT 1
       FROM   CUSTINFO
       WHERE  CIID = VAR_MICID
        AND   VAR_MICID IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "BOOKFRAME"
    CURSOR CPK2_METERINFO(VAR_MIBFID VARCHAR) IS
       SELECT 1
       FROM   BOOKFRAME
       WHERE  BFID = VAR_MIBFID
        AND   VAR_MIBFID IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "SYSMANAFRAME"
    CURSOR CPK3_METERINFO(VAR_MISMFID VARCHAR) IS
       SELECT 1
       FROM   SYSMANAFRAME
       WHERE  SMFID = VAR_MISMFID
        AND   VAR_MISMFID IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "SYSMETERTYPE"
    CURSOR CPK4_METERINFO(VAR_MITYPE VARCHAR) IS
       SELECT 1
       FROM   SYSMETERTYPE
       WHERE  SMTID = VAR_MITYPE
        AND   VAR_MITYPE IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "SYSREADTYPE"
    CURSOR CPK5_METERINFO(VAR_MIRTID VARCHAR) IS
       SELECT 1
       FROM   SYSREADTYPE
       WHERE  SRTID = VAR_MIRTID
        AND   VAR_MIRTID IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "SYSMETERSTATUS"
    CURSOR CPK6_METERINFO(VAR_MISTATUS VARCHAR) IS
       SELECT 1
       FROM   SYSMETERSTATUS
       WHERE  SMSID = VAR_MISTATUS
        AND   VAR_MISTATUS IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "METERSORTFRAME"
    CURSOR CPK7_METERINFO(VAR_MISTID VARCHAR) IS
       SELECT 1
       FROM   METERSORTFRAME
       WHERE  MSFID = VAR_MISTID
        AND   VAR_MISTID IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "METERFACE"
    CURSOR CPK8_METERINFO(VAR_MIFACE VARCHAR) IS
       SELECT 1
       FROM   METERFACE
       WHERE  MFID = VAR_MIFACE
        AND   VAR_MIFACE IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "READPRICE"
    CURSOR CPK9_METERINFO(VAR_MIRPID VARCHAR) IS
       SELECT 1
       FROM   READPRICE
       WHERE  RPID = VAR_MIRPID
        AND   VAR_MIRPID IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "SYSAREAFRAME"
    CURSOR CPK10_METERINFO(VAR_MISAFID VARCHAR) IS
       SELECT 1
       FROM   SYSAREAFRAME
       WHERE  SAFID = VAR_MISAFID
        AND   VAR_MISAFID IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "SYSCHARGETYPE"
    CURSOR CPK11_METERINFO(VAR_MICHARGETYPE VARCHAR) IS
       SELECT 1
       FROM   SYSCHARGETYPE
       WHERE  SCTID = VAR_MICHARGETYPE
        AND   VAR_MICHARGETYPE IS NOT NULL;
    --  DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "PRICEFRAME"
    CURSOR CPK12_METERINFO(VAR_MIPFID VARCHAR) IS
       SELECT 1
       FROM   PRICEFRAME
       WHERE  PFID = VAR_MIPFID
        AND   VAR_MIPFID IS NOT NULL;
    --  DECLARATION OF UPDATEPARENTRESTRICT CONSTRAINT FOR "PRICESPECIFYDETAIL"
    CURSOR CFK1_PRICESPECIFYDETAIL(VAR_MICID VARCHAR,
                    VAR_MIID VARCHAR) IS
       SELECT 1
       FROM   PRICESPECIFYDETAIL
       WHERE  PSDCID = VAR_MICID
        AND   PSDMID = VAR_MIID
        AND   VAR_MICID IS NOT NULL
        AND   VAR_MIID IS NOT NULL;
    --  DECLARATION OF UPDATEPARENTRESTRICT CONSTRAINT FOR "PRICEMULTIDETAIL"
    CURSOR CFK2_PRICEMULTIDETAIL(VAR_MICID VARCHAR,
                    VAR_MIID VARCHAR) IS
       SELECT 1
       FROM   PRICEMULTIDETAIL
       WHERE  PMDCID = VAR_MICID
        AND   PMDMID = VAR_MIID
        AND   VAR_MICID IS NOT NULL
        AND   VAR_MIID IS NOT NULL;
    --  DECLARATION OF UPDATEPARENTRESTRICT CONSTRAINT FOR "METERREAD"
    CURSOR CFK3_METERREAD(VAR_MIID VARCHAR) IS
       SELECT 1
       FROM   METERREAD
       WHERE  MRMPID = VAR_MIID
        AND   VAR_MIID IS NOT NULL;
    --  DECLARATION OF UPDATEPARENTRESTRICT CONSTRAINT FOR "METERREAD"
    CURSOR CFK4_METERREAD(VAR_MIID VARCHAR) IS
       SELECT 1
       FROM   METERREAD
       WHERE  MRMID = VAR_MIID
        AND   VAR_MIID IS NOT NULL;
    --  DECLARATION OF UPDATEPARENTRESTRICT CONSTRAINT FOR "METERACCOUNT"
    CURSOR CFK6_METERACCOUNT(VAR_MIID VARCHAR) IS
       SELECT 1
       FROM   METERACCOUNT
       WHERE  MAMID = VAR_MIID
        AND   VAR_MIID IS NOT NULL;
    --  DECLARATION OF UPDATEPARENTRESTRICT CONSTRAINT FOR "METERDOC"
    CURSOR CFK7_METERDOC(VAR_MIID VARCHAR) IS
       SELECT 1
       FROM   METERDOC
       WHERE  MDMID = VAR_MIID
        AND   VAR_MIID IS NOT NULL;

BEGIN
   if nvl(fsyspara('data'),'N')='Y' then
     return;
  end if;
    SEQ := INTEGRITYPACKAGE.GETNESTLEVEL;
    --  PARENT "CUSTINFO" MUST EXIST WHEN UPDATING A CHILD IN "METERINFO"
    IF (:NEW.MICID IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK1_METERINFO(:NEW.MICID);
       FETCH CPK1_METERINFO INTO DUMMY;
       FOUND := CPK1_METERINFO%FOUND;
       close CPK1_METERINFO;
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN "CUSTINFO". CANNOT UPDATE CHILD IN "METERINFO".';
          raise integrity_error;
       end if;
    end if;

    --  Parent "BOOKFRAME" must exist when updating a child in "METERINFO"
    if (:new.MIBFID is not null) and (seq = 0) then
       open  CPK2_METERINFO(:new.MIBFID);
       fetch CPK2_METERINFO into dummy;
       found := CPK2_METERINFO%FOUND;
       CLOSE CPK2_METERINFO;
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN "BOOKFRAME". CANNOT UPDATE CHILD IN "METERINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  PARENT "SYSMANAFRAME" MUST EXIST WHEN UPDATING A CHILD IN "METERINFO"
    IF (:NEW.MISMFID IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK3_METERINFO(:NEW.MISMFID);
       FETCH CPK3_METERINFO INTO DUMMY;
       FOUND := CPK3_METERINFO%FOUND;
       close CPK3_METERINFO;
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN "SYSMANAFRAME". CANNOT UPDATE CHILD IN "METERINFO".';
          raise integrity_error;
       end if;
    end if;

    --  Parent "SYSMETERTYPE" must exist when updating a child in "METERINFO"
    if (:new.MITYPE is not null) and (seq = 0) then
       open  CPK4_METERINFO(:new.MITYPE);
       fetch CPK4_METERINFO into dummy;
       found := CPK4_METERINFO%FOUND;
       CLOSE CPK4_METERINFO;
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN "SYSMETERTYPE". CANNOT UPDATE CHILD IN "METERINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  PARENT "SYSREADTYPE" MUST EXIST WHEN UPDATING A CHILD IN "METERINFO"
    IF (:NEW.MIRTID IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK5_METERINFO(:NEW.MIRTID);
       FETCH CPK5_METERINFO INTO DUMMY;
       FOUND := CPK5_METERINFO%FOUND;
       close CPK5_METERINFO;
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN "SYSREADTYPE". CANNOT UPDATE CHILD IN "METERINFO".';
          raise integrity_error;
       end if;
    end if;

    --  Parent "SYSMETERSTATUS" must exist when updating a child in "METERINFO"
    if (:new.MISTATUS is not null) and (seq = 0) then
       open  CPK6_METERINFO(:new.MISTATUS);
       fetch CPK6_METERINFO into dummy;
       found := CPK6_METERINFO%FOUND;
       CLOSE CPK6_METERINFO;
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN "SYSMETERSTATUS". CANNOT UPDATE CHILD IN "METERINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  PARENT "METERSORTFRAME" MUST EXIST WHEN UPDATING A CHILD IN "METERINFO"
    IF (:NEW.MISTID IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK7_METERINFO(:NEW.MISTID);
       FETCH CPK7_METERINFO INTO DUMMY;
       FOUND := CPK7_METERINFO%FOUND;
       close CPK7_METERINFO;
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN "METERSORTFRAME". CANNOT UPDATE CHILD IN "METERINFO".';
          raise integrity_error;
       end if;
    end if;

    --  Parent "METERFACE" must exist when updating a child in "METERINFO"
    if (:new.MIFACE is not null) and (seq = 0) then
       open  CPK8_METERINFO(:new.MIFACE);
       fetch CPK8_METERINFO into dummy;
       found := CPK8_METERINFO%FOUND;
       CLOSE CPK8_METERINFO;
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN "METERFACE". CANNOT UPDATE CHILD IN "METERINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  PARENT "READPRICE" MUST EXIST WHEN UPDATING A CHILD IN "METERINFO"
    IF (:NEW.MIRPID IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK9_METERINFO(:NEW.MIRPID);
       FETCH CPK9_METERINFO INTO DUMMY;
       FOUND := CPK9_METERINFO%FOUND;
       close CPK9_METERINFO;
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN "READPRICE". CANNOT UPDATE CHILD IN "METERINFO".';
          raise integrity_error;
       end if;
    end if;

    --  Parent "SYSAREAFRAME" must exist when updating a child in "METERINFO"
    if (:new.MISAFID is not null) and (seq = 0) then
       open  CPK10_METERINFO(:new.MISAFID);
       fetch CPK10_METERINFO into dummy;
       found := CPK10_METERINFO%FOUND;
       CLOSE CPK10_METERINFO;
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN "SYSAREAFRAME". CANNOT UPDATE CHILD IN "METERINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  PARENT "SYSCHARGETYPE" MUST EXIST WHEN UPDATING A CHILD IN "METERINFO"
    IF (:NEW.MICHARGETYPE IS NOT NULL) AND (SEQ = 0) THEN
       OPEN  CPK11_METERINFO(:NEW.MICHARGETYPE);
       FETCH CPK11_METERINFO INTO DUMMY;
       FOUND := CPK11_METERINFO%FOUND;
       close CPK11_METERINFO;
       if not found then
          errno  := -20003;
          errmsg := 'PARENT DOES NOT EXIST IN "SYSCHARGETYPE". CANNOT UPDATE CHILD IN "METERINFO".';
          raise integrity_error;
       end if;
    end if;

    --  Parent "PRICEFRAME" must exist when updating a child in "METERINFO"
    if (:new.MIPFID is not null) and (seq = 0) then
       open  CPK12_METERINFO(:new.MIPFID);
       fetch CPK12_METERINFO into dummy;
       found := CPK12_METERINFO%FOUND;
       CLOSE CPK12_METERINFO;
       IF NOT FOUND THEN
          ERRNO  := -20003;
          ERRMSG := 'PARENT DOES NOT EXIST IN "PRICEFRAME". CANNOT UPDATE CHILD IN "METERINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  CANNOT MODIFY PARENT CODE IN "METERINFO" IF CHILDREN STILL EXIST IN "PRICESPECIFYDETAIL"
    IF (UPDATING('MICID') AND :OLD.MICID != :NEW.MICID) OR
       (UPDATING('MIID') AND :OLD.MIID != :NEW.MIID) THEN
       OPEN  CFK1_PRICESPECIFYDETAIL(:OLD.MICID,
                      :OLD.MIID);
       FETCH CFK1_PRICESPECIFYDETAIL INTO DUMMY;
       FOUND := CFK1_PRICESPECIFYDETAIL%FOUND;
       close CFK1_PRICESPECIFYDETAIL;
       if found then
          errno  := -20005;
          errmsg := 'CHILDREN STILL EXIST IN "PRICESPECIFYDETAIL". CANNOT MODIFY PARENT CODE IN "METERINFO".';
          raise integrity_error;
       end if;
    end if;

    --  Cannot modify parent code in "METERINFO" if children still exist in "PRICEMULTIDETAIL"
    if (updating('MICID') and :old.MICID != :new.MICID) or
       (updating('MIID') and :old.MIID != :new.MIID) then
       open  CFK2_PRICEMULTIDETAIL(:old.MICID,
                      :old.MIID);
       fetch CFK2_PRICEMULTIDETAIL into dummy;
       found := CFK2_PRICEMULTIDETAIL%FOUND;
       CLOSE CFK2_PRICEMULTIDETAIL;
       IF FOUND THEN
          ERRNO  := -20005;
          ERRMSG := 'CHILDREN STILL EXIST IN "PRICEMULTIDETAIL". CANNOT MODIFY PARENT CODE IN "METERINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  CANNOT MODIFY PARENT CODE IN "METERINFO" IF CHILDREN STILL EXIST IN "METERREAD"
    IF (UPDATING('MIID') AND :OLD.MIID != :NEW.MIID) THEN
       OPEN  CFK3_METERREAD(:OLD.MIID);
       FETCH CFK3_METERREAD INTO DUMMY;
       FOUND := CFK3_METERREAD%FOUND;
       close CFK3_METERREAD;
       if found then
          errno  := -20005;
          errmsg := 'CHILDREN STILL EXIST IN "METERREAD". CANNOT MODIFY PARENT CODE IN "METERINFO".';
          raise integrity_error;
       end if;
    end if;

    --  Cannot modify parent code in "METERINFO" if children still exist in "METERREAD"
    if (updating('MIID') and :old.MIID != :new.MIID) then
       open  CFK4_METERREAD(:old.MIID);
       fetch CFK4_METERREAD into dummy;
       found := CFK4_METERREAD%FOUND;
       CLOSE CFK4_METERREAD;
       IF FOUND THEN
          ERRNO  := -20005;
          ERRMSG := 'CHILDREN STILL EXIST IN "METERREAD". CANNOT MODIFY PARENT CODE IN "METERINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;

    --  CANNOT MODIFY PARENT CODE IN "METERINFO" IF CHILDREN STILL EXIST IN "METERACCOUNT"
    IF (UPDATING('MIID') AND :OLD.MIID != :NEW.MIID) THEN
       OPEN  CFK6_METERACCOUNT(:OLD.MIID);
       FETCH CFK6_METERACCOUNT INTO DUMMY;
       FOUND := CFK6_METERACCOUNT%FOUND;
       close CFK6_METERACCOUNT;
       if found then
          errno  := -20005;
          errmsg := 'CHILDREN STILL EXIST IN "METERACCOUNT". CANNOT MODIFY PARENT CODE IN "METERINFO".';
          raise integrity_error;
       end if;
    end if;

    --  Cannot modify parent code in "METERINFO" if children still exist in "METERDOC"
    if (updating('MIID') and :old.MIID != :new.MIID) then
       open  CFK7_METERDOC(:old.MIID);
       fetch CFK7_METERDOC into dummy;
       found := CFK7_METERDOC%FOUND;
       CLOSE CFK7_METERDOC;
       IF FOUND THEN
          ERRNO  := -20005;
          ERRMSG := 'CHILDREN STILL EXIST IN "METERDOC". CANNOT MODIFY PARENT CODE IN "METERINFO".';
          RAISE INTEGRITY_ERROR;
       END IF;
    END IF;


--  ERRORS HANDLING
EXCEPTION
    WHEN INTEGRITY_ERROR THEN
       RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
/

