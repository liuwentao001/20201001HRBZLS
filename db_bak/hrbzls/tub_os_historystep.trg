CREATE OR REPLACE TRIGGER HRBZLS."TUB_OS_HISTORYSTEP" BEFORE UPDATE
OF ID,
 ENTRY_ID,
 OWNER
ON OS_HISTORYSTEP FOR EACH ROW
DECLARE
 INTEGRITY_ERROR EXCEPTION;
 ERRNO INTEGER;
 ERRMSG CHAR(200);
 DUMMY INTEGER;
 FOUND BOOLEAN;
 SEQ NUMBER;
 -- DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "OS_WFENTRY"
 CURSOR CPK1_OS_HISTORYSTEP(VAR_ENTRY_ID NUMBER) IS
 SELECT 1
 FROM OS_WFENTRY
 WHERE ID = VAR_ENTRY_ID
 AND VAR_ENTRY_ID IS NOT NULL;
 -- DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""OS_SCHEDULER""
 CURSOR CPK2_OS_HISTORYSTEP(VAR_OWNER VARCHAR) IS
 SELECT 1
 FROM "OS_SCHEDULER"
 WHERE "ID" = VAR_OWNER
 AND VAR_OWNER IS NOT NULL;
 -- DECLARATION OF UPDATEPARENTRESTRICT CONSTRAINT FOR "OS_CURRENTSTEP_PREV"
 CURSOR CFK1_OS_CURRENTSTEP_PREV(VAR_ID NUMBER) IS
 SELECT 1
 FROM OS_CURRENTSTEP_PREV
 WHERE PREVIOUS_ID = VAR_ID
 AND VAR_ID IS NOT NULL;
 -- DECLARATION OF UPDATEPARENTRESTRICT CONSTRAINT FOR "OS_HISTORYSTEP_PREV"
 CURSOR CFK2_OS_HISTORYSTEP_PREV(VAR_ID NUMBER) IS
 SELECT 1
 FROM OS_HISTORYSTEP_PREV
 WHERE ID = VAR_ID
 AND VAR_ID IS NOT NULL;
 -- DECLARATION OF UPDATEPARENTRESTRICT CONSTRAINT FOR "OS_HISTORYSTEP_PREV"
 CURSOR CFK3_OS_HISTORYSTEP_PREV(VAR_ID NUMBER) IS
 SELECT 1
 FROM OS_HISTORYSTEP_PREV
 WHERE PREVIOUS_ID = VAR_ID
 AND VAR_ID IS NOT NULL;

BEGIN
   if nvl(fsyspara('data'),'N')='Y' then
     return;
  end if;
 SEQ := INTEGRITYPACKAGE.GETNESTLEVEL;
 -- PARENT "OS_WFENTRY" MUST EXIST WHEN UPDATING A CHILD IN "OS_HISTORYSTEP"
 IF (:NEW.ENTRY_ID IS NOT NULL) AND (SEQ = 0) THEN
 OPEN CPK1_OS_HISTORYSTEP(:NEW.ENTRY_ID);
 FETCH CPK1_OS_HISTORYSTEP INTO DUMMY;
 FOUND := CPK1_OS_HISTORYSTEP%FOUND;
 close CPK1_OS_HISTORYSTEP;
 if not found then
 errno := -20003;
 errmsg := 'PARENT DOES NOT EXIST IN "OS_WFENTRY". CANNOT UPDATE CHILD IN "OS_HISTORYSTEP".';
 raise integrity_error;
 end if;
 end if;

 -- Parent ""OS_SCHEDULER"" must exist when updating a child in "OS_HISTORYSTEP"
 if (:new.OWNER is not null) and (seq = 0) then
 open CPK2_OS_HISTORYSTEP(:new.OWNER);
 fetch CPK2_OS_HISTORYSTEP into dummy;
 found := CPK2_OS_HISTORYSTEP%FOUND;
 CLOSE CPK2_OS_HISTORYSTEP;
 IF NOT FOUND THEN
 ERRNO := -20003;
 ERRMSG := 'PARENT DOES NOT EXIST IN ""OS_SCHEDULER"". CANNOT UPDATE CHILD IN "OS_HISTORYSTEP".';
 RAISE INTEGRITY_ERROR;
 END IF;
 END IF;

 -- CANNOT MODIFY PARENT CODE IN "OS_HISTORYSTEP" IF CHILDREN STILL EXIST IN "OS_CURRENTSTEP_PREV"
 IF (UPDATING('ID') AND :OLD.ID != :NEW.ID) THEN
 OPEN CFK1_OS_CURRENTSTEP_PREV(:OLD.ID);
 FETCH CFK1_OS_CURRENTSTEP_PREV INTO DUMMY;
 FOUND := CFK1_OS_CURRENTSTEP_PREV%FOUND;
 close CFK1_OS_CURRENTSTEP_PREV;
 if found then
 errno := -20005;
 errmsg := 'CHILDREN STILL EXIST IN "OS_CURRENTSTEP_PREV". CANNOT MODIFY PARENT CODE IN "OS_HISTORYSTEP".';
 raise integrity_error;
 end if;
 end if;

 -- Cannot modify parent code in "OS_HISTORYSTEP" if children still exist in "OS_HISTORYSTEP_PREV"
 if (updating('ID') and :old.ID != :new.ID) then
 open CFK2_OS_HISTORYSTEP_PREV(:old.ID);
 fetch CFK2_OS_HISTORYSTEP_PREV into dummy;
 found := CFK2_OS_HISTORYSTEP_PREV%FOUND;
 CLOSE CFK2_OS_HISTORYSTEP_PREV;
 IF FOUND THEN
 ERRNO := -20005;
 ERRMSG := 'CHILDREN STILL EXIST IN "OS_HISTORYSTEP_PREV". CANNOT MODIFY PARENT CODE IN "OS_HISTORYSTEP".';
 RAISE INTEGRITY_ERROR;
 END IF;
 END IF;

 -- CANNOT MODIFY PARENT CODE IN "OS_HISTORYSTEP" IF CHILDREN STILL EXIST IN "OS_HISTORYSTEP_PREV"
 IF (UPDATING('ID') AND :OLD.ID != :NEW.ID) THEN
 OPEN CFK3_OS_HISTORYSTEP_PREV(:OLD.ID);
 FETCH CFK3_OS_HISTORYSTEP_PREV INTO DUMMY;
 FOUND := CFK3_OS_HISTORYSTEP_PREV%FOUND;
 CLOSE CFK3_OS_HISTORYSTEP_PREV;
 IF FOUND THEN
 ERRNO := -20005;
 ERRMSG := 'CHILDREN STILL EXIST IN "OS_HISTORYSTEP_PREV". CANNOT MODIFY PARENT CODE IN "OS_HISTORYSTEP".';
 RAISE INTEGRITY_ERROR;
 END IF;
 END IF;


-- ERRORS HANDLING
EXCEPTION
 WHEN INTEGRITY_ERROR THEN
 RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
/

