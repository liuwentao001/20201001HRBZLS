CREATE OR REPLACE TRIGGER HRBZLS."TIB_OS_HISTORYSTEP" BEFORE INSERT
ON OS_HISTORYSTEP FOR EACH ROW
DECLARE
 INTEGRITY_ERROR EXCEPTION;
 ERRNO INTEGER;
 ERRMSG CHAR(200);
 DUMMY INTEGER;
 FOUND BOOLEAN;
 -- DECLARATION OF INSERTCHILDPARENTEXIST CONSTRAINT FOR THE PARENT "OS_WFENTRY"
 CURSOR CPK1_OS_HISTORYSTEP(VAR_ENTRY_ID NUMBER) IS
 SELECT 1
 FROM OS_WFENTRY
 WHERE ID = VAR_ENTRY_ID
 AND VAR_ENTRY_ID IS NOT NULL;
 -- DECLARATION OF INSERTCHILDPARENTEXIST CONSTRAINT FOR THE PARENT ""OS_SCHEDULER""
 CURSOR CPK2_OS_HISTORYSTEP(VAR_OWNER VARCHAR) IS
 SELECT 1
 FROM "OS_SCHEDULER"
 WHERE "ID" = VAR_OWNER
 AND VAR_OWNER IS NOT NULL;

BEGIN
  if nvl(fsyspara('data'),'N')='Y' then
     return;
  end if;
 -- PARENT "OS_WFENTRY" MUST EXIST WHEN INSERTING A CHILD IN "OS_HISTORYSTEP"
 IF :NEW.ENTRY_ID IS NOT NULL THEN
 OPEN CPK1_OS_HISTORYSTEP(:NEW.ENTRY_ID);
 FETCH CPK1_OS_HISTORYSTEP INTO DUMMY;
 FOUND := CPK1_OS_HISTORYSTEP%FOUND;
 close CPK1_OS_HISTORYSTEP;
 if not found then
 errno := -20002;
 errmsg := 'PARENT DOES NOT EXIST IN "OS_WFENTRY". CANNOT CREATE CHILD IN "OS_HISTORYSTEP".';
 raise integrity_error;
 end if;
 end if;

 -- Parent ""OS_SCHEDULER"" must exist when inserting a child in "OS_HISTORYSTEP"
 if :new.OWNER is not null then
 open CPK2_OS_HISTORYSTEP(:new.OWNER);
 fetch CPK2_OS_HISTORYSTEP into dummy;
 found := CPK2_OS_HISTORYSTEP%FOUND;
 CLOSE CPK2_OS_HISTORYSTEP;
 IF NOT FOUND THEN
 ERRNO := -20002;
 ERRMSG := 'PARENT DOES NOT EXIST IN ""OS_SCHEDULER"". CANNOT CREATE CHILD IN "OS_HISTORYSTEP".';
 RAISE INTEGRITY_ERROR;
 END IF;
 END IF;


-- ERRORS HANDLING
EXCEPTION
 WHEN INTEGRITY_ERROR THEN
 RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
/

