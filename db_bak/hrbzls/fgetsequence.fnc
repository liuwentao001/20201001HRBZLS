CREATE OR REPLACE FUNCTION HRBZLS."FGETSEQUENCE" (AS_TAB_NAME IN VARCHAR2) RETURN VARCHAR2
IS
----------------------------------------------------------------------------
-- 函数：GET_SEQUENCE
-- 按照在SEQ LIST 表中定义的细节返回序列值
-- INPUT： AS_TAB_NAME 数据表名
-- RETURN：VARCHAR2 返回的序列值
----------------------------------------------------------------------------
LN_SEQ_NUM NUMBER;
LS_SEQ_NUM VARCHAR2(20);
LS_PREFIX VARCHAR2(2);
AS_SEQ_NAME VARCHAR2(30);
TEMP_ID VARCHAR2(40);
LS_CUR_SYNTAX VARCHAR(200);
LI_CUR_HANDLE INTEGER;
LI_RTN INTEGER;
LR_SEQLIST SYSSEQLIST%ROWTYPE;
PRELEN NUMBER;
BEGIN
--获得当前的序列相关的定义
 SELECT SSLSEQNAME,NVL(SSLPREFIX,' '),SSLWIDTH,SSLSTARTNO
 INTO LR_SEQLIST.SSLSEQNAME,LR_SEQLIST.SSLPREFIX,LR_SEQLIST.SSLWIDTH,LR_SEQLIST.SSLSTARTNO
 FROM HRBZLS.SYSSEQLIST
 WHERE UPPER(SSLTBLNAME)=UPPER(AS_TAB_NAME);

 IF TRIM(LR_SEQLIST.SSLPREFIX) IS NULL THEN
 PRELEN :=0;
 ELSE
 PRELEN := LENGTH(TRIM(LR_SEQLIST.SSLPREFIX));
 END IF;

--动态SQL取序列的值
 AS_SEQ_NAME:=LR_SEQLIST.SSLSEQNAME;
 LS_PREFIX:= LR_SEQLIST.SSLPREFIX ;
 LI_CUR_HANDLE:=DBMS_SQL.OPEN_CURSOR;
 LS_CUR_SYNTAX:='select '||AS_SEQ_NAME||'.nextval from dual';
 DBMS_SQL.PARSE(LI_CUR_HANDLE,LS_CUR_SYNTAX,DBMS_SQL.NATIVE);
 DBMS_SQL.DEFINE_COLUMN(LI_CUR_HANDLE,1,LN_SEQ_NUM);

 LI_RTN:=DBMS_SQL.EXECUTE(LI_CUR_HANDLE);
 IF DBMS_SQL.FETCH_ROWS(LI_CUR_HANDLE)>0 THEN
 DBMS_SQL.COLUMN_VALUE(LI_CUR_HANDLE,1,LN_SEQ_NUM );
 DBMS_SQL.CLOSE_CURSOR(LI_CUR_HANDLE);
 END IF;

-- 按照预定的格式返回序列值
 TEMP_ID:='000000000000000000000000000000'||TO_CHAR(LN_SEQ_NUM);
 LS_SEQ_NUM:=TRIM(LR_SEQLIST.SSLPREFIX||SUBSTR(TEMP_ID,LENGTH(TEMP_ID)-LR_SEQLIST.SSLWIDTH+PRELEN+1,LR_SEQLIST.SSLWIDTH-PRELEN));


 RETURN (LS_SEQ_NUM);

EXCEPTION
 WHEN NO_DATA_FOUND THEN
 LS_SEQ_NUM:='seq not exist!';
 RETURN LS_SEQ_NUM;
 WHEN OTHERS THEN
 BEGIN
 -- 如果序列不存在，则按SEQ LIST数据表中的定义动态生成序列
 DBMS_SQL.CLOSE_CURSOR(LI_CUR_HANDLE);
 LS_CUR_SYNTAX := 'create sequence '||AS_SEQ_NAME||' minvalue 1
                            maxvalue 9999999999999999999999999999 start with '||TO_CHAR(LR_SEQLIST.SSLSTARTNO+1);
 EXECUTE IMMEDIATE (LS_CUR_SYNTAX);
 LN_SEQ_NUM := LR_SEQLIST.SSLSTARTNO;

 -- 按照预定的格式返回序列的初始值
 TEMP_ID:='000000000000000000000000000000'||TO_CHAR(LN_SEQ_NUM);
-- LS_SEQ_NUM:=LR_SEQLIST.PREFIX||SUBSTR(TEMP_ID,LENGTH(TEMP_ID)-LR_SEQLIST.S_WIDTH+LENGTH(LS_PREFIX)+1,LR_SEQLIST.S_WIDTH-LENGTH(LS_PREFIX));
 LS_SEQ_NUM:=TRIM(LR_SEQLIST.SSLPREFIX||SUBSTR(TEMP_ID,LENGTH(TEMP_ID)-LR_SEQLIST.SSLWIDTH+PRELEN+1,LR_SEQLIST.SSLWIDTH-PRELEN));
 RETURN LS_SEQ_NUM;
 EXCEPTION
 WHEN OTHERS THEN
 LS_SEQ_NUM:='seq error!';
 RETURN LS_SEQ_NUM;
 END;
END;
/

