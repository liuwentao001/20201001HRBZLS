CREATE OR REPLACE TRIGGER HRBZLS."TUB_OPERACCOUNTROLE" BEFORE UPDATE
OF OAROAID,
 OARRID
ON OPERACCNTROLE FOR EACH ROW
DECLARE
 INTEGRITY_ERROR EXCEPTION;
 ERRNO INTEGER;
 ERRMSG CHAR(200);
 DUMMY INTEGER;
 FOUND BOOLEAN;
 SEQ NUMBER;
 -- DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "OPERACCNT"
 CURSOR CPK1_OPERACCNTROLE(VAR_OAROAID VARCHAR) IS
 SELECT 1
 FROM OPERACCNT
 WHERE OAID = VAR_OAROAID
 AND VAR_OAROAID IS NOT NULL;
 -- DECLARATION OF UPDATECHILDPARENTEXIST CONSTRAINT FOR THE PARENT "OPERROLE"
 CURSOR CPK2_OPERACCNTROLE(VAR_OARRID VARCHAR) IS
 SELECT 1
 FROM OPERROLE
 WHERE ORID = VAR_OARRID
 AND VAR_OARRID IS NOT NULL;

BEGIN
    if nvl(fsyspara('data'),'N')='Y' then
     return;
  end if;
 SEQ := INTEGRITYPACKAGE.GETNESTLEVEL;
 -- PARENT "OPERACCNT" MUST EXIST WHEN UPDATING A CHILD IN "OPERACCNTROLE"
 IF (:NEW.OAROAID IS NOT NULL) AND (SEQ = 0) THEN
 OPEN CPK1_OPERACCNTROLE(:NEW.OAROAID);
 FETCH CPK1_OPERACCNTROLE INTO DUMMY;
 FOUND := CPK1_OPERACCNTROLE%FOUND;
 close CPK1_OPERACCNTROLE;
 if not found then
 errno := -20003;
 errmsg := 'PARENT DOES NOT EXIST IN "OPERACCNT". CANNOT UPDATE CHILD IN "OPERACCNTROLE".';
 raise integrity_error;
 end if;
 end if;

 -- Parent "OPERROLE" must exist when updating a child in "OPERACCNTROLE"
 if (:new.OARRID is not null) and (seq = 0) then
 open CPK2_OPERACCNTROLE(:new.OARRID);
 fetch CPK2_OPERACCNTROLE into dummy;
 found := CPK2_OPERACCNTROLE%FOUND;
 CLOSE CPK2_OPERACCNTROLE;
 IF NOT FOUND THEN
 ERRNO := -20003;
 ERRMSG := 'PARENT DOES NOT EXIST IN "OPERROLE". CANNOT UPDATE CHILD IN "OPERACCNTROLE".';
 RAISE INTEGRITY_ERROR;
 END IF;
 END IF;


-- ERRORS HANDLING
EXCEPTION
 WHEN INTEGRITY_ERROR THEN
 RAISE_APPLICATION_ERROR(ERRNO, ERRMSG);
END;
/

